---
title: "HW3-plotting"
author: "Sam Muir"
date: 2024-03-02
format:
  html:
    embed-resources: true
---

1.  Which option do you plan to pursue?

-   I am planning to make an infographic

2.  Restate your question(s). Has this changed at all since HW #1? If yes, how so?

-   My question has changed a bit as I've worked with the data more. I have landed on "How has the abundance of invertebrate animals changed over time at the Georgia Coastal Ecosystem LTER Flux Tower?". This is more focused on to one topic and I think will be easier to communicate than my previous question which encompassed too many factors. My sub-questions are:
    -   "How do grasshopper and planthopper abundances vary by year and month?"
    -   "How have Marsh Periwinkle Snail counts changed over time?"
    -   "How do Marsh Periwinkle Snail counts 2014-2022 vary by Marsh Grass Height Zone?"

3.  Explain which variables from your data set(s) you will use to answer your question(s).

-   I have a couple of different data sets from the same study at the LTER site. I am going to use grasshopper_abundance_index (abundance classification for grasshoppers), prokelisia_abundance index (abundance classification for planthoppers), littoraria_count (Marsh Periwinkle Snail count), spartina_zone (height zone of the marsh grass), and date. After wrangling the data, I was able to join the ones I wanted to use. I calculated the maximum grasshopper and plant hopper abundance by taking the highest abundance for each month and year. This allows me to plot the abundance level for each year and month. For the snails, I was able to find the counts for each month over the different years so I can visualize the change in counts over time. I also calculated the total counts over the 2014-2022 time period for each of the three marsh grass height zones, so I can plot these total counts in the different zones.

4.  In HW #2, you should have created some exploratory data viz to better understand your data. You may already have some ideas of how you plan to formally visualize your data, but it's incredibly helpful to look at visualizations by other creators for inspiration. Find at least two data visualizations that you could (potentially) borrow / adapt pieces from. Link to them or download and embed them into your .qmd file, and explain which elements you might borrow (e.g. the graphic form, legend design, layout, etc.).

https://github.com/doehm/tidytues?tab=readme-ov-file#week-10-numbats

https://www.data-to-viz.com/graph/line.html

5. Hand-draw your anticipated three visualizations (option 1) or infographic (option 2). Take a photo of your drawing and embed it in your rendered .qmd file – note that these are not exploratory visualizations, but rather your plan for your final visualizations that you will eventually polish and submit with HW #4.

6. Mock up your visualizations using code. We understand that you will continue to iterate on these into HW #4 (particularly after receiving feedback), but by the end of HW #3, you should:

- have your data plotted (if you’re experimenting with an advanced graphic form(s) that were not explicitly covered in class, we understand that this may take some more time to build; you should have as much put together as possible)
- use appropriate strategies to highlight / focus attention on a clear message
- include appropriate text such as titles, captions, axis labels
- experiment with colors and typefaces / fonts
- create a presentable / aesthetically-pleasing theme (e.g. (re)move gridlines / legends as appropriate, adjust font sizes, etc.)


```{r, libraries, message=FALSE}
# libraries
library(tidyverse)
library(janitor)
library(sf)
library(sysfonts)
library(scales)
library(patchwork)
```

```{r}
# read in the data
animals <- read_csv("data/animals/PLT-GCEM-1610_Animals_9_0.CSV", skip = 2)[-c(1,2),]
biomass <- read_csv("data/biomass/PLT-GCEM-1610_Biomass_10_0.CSV", skip = 2)[-c(1,2),]
vegetation <- read_csv("data/vegetation/PLT-GCEM-1610_Vegetation_9_0.CSV", skip = 2)[-c(1,2),]
stemheight <- read_csv("data/stemheight/PLT-GCEM-1610_StemHeight_10_0.CSV", skip = 2)[-c(1,2),]
```

```{r, data cleaning, warning=FALSE, message=FALSE}
# data cleaning 
animals_clean <- animals %>%
  clean_names() %>%
  mutate_at(c("latitude", "longitude", "littoraria_count"), as.numeric) %>% # change cols to numeric
  mutate_at(c("grasshopper_abundance_index", "prokelisia_abundance_index", "littoraria_quadrat_area", "plot_number", "spartina_zone"), as.factor) %>% # change cols to factor
  mutate(date = lubridate::as_date(date)) # change date to a date

biomass_clean <- biomass %>%
  clean_names() %>%
  mutate_at(c("biomass_aboveground_green", "biomass_aboveground_brown", "biomass_aboveground_total", "biomass_belowground_0to10cm", "biomass_belowground_10to30cm", "biomass_belowground_total", "rhizomes_0to10cm", "root_to_shoot_ratio"), as.numeric) %>% # change cols to numeric
  mutate_at(c("spartina_zone", "replicate"), as.factor) %>% # change cols to factor
  mutate(date = lubridate::as_date(date)) # change date to a date

stemheight_clean <- stemheight %>%
  clean_names() %>%
  mutate_at(c("spartina_zone"), as.factor) %>% # change cols to factor
  mutate_at(c("core_number", "stem_number", "stem_height"), as.numeric) %>% # change cols to numeric
  mutate(date = lubridate::as_date(date))

## maybe there was a better way to do all of this? but seems like good practice either way 

# joining some of the data frames
stem_animals <- full_join(animals_clean, stemheight_clean, relationship = "many-to-many") %>% # join animals and stemheight
  mutate(year = as.factor(year(date)), # get year from the date
         month = as.factor(month(date))) %>% # get month from the date
  full_join(biomass_clean)
```

# Plots

```{r}
# line plot for counts over the years

# data prep
snail_plotting <- stem_animals %>%
  filter(year != 2013) %>%
  mutate(year_month = format(date, "%y/%m")) %>%
  group_by(year_month) %>%
  summarise(counts = sum(littoraria_count, na.rm = TRUE)) %>%
  mutate(year_month = ym(year_month))

# plot
ggplot(snail_plotting, aes(x = year_month, y = counts, group = 1)) +
  geom_point(color = "darkgreen") +
  geom_line(color = "darkgreen") +
  theme_bw() +
  labs(x = "Year", y = "Marsh Periwinkle Snail Count") +
  theme_minimal(base_family = "fira condensed") +
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45, hjust = 1),
        axis.title.y = element_text(margin = margin(r = 15)),
        axis.title.x = element_text(margin = margin(t = 15)),
        panel.grid.major.x = element_line(color = "grey50", linewidth = 0.25, linetype = "dotted"),
        panel.grid.major.y = element_line(color = "grey50", linetype = "dotted")
        )
```

```{r}
# bar chart for counts by spartina zone
stem_animals %>%
  filter(year != 2013) %>%
  mutate(spartina_zone_name = case_when(spartina_zone == "S" ~ "Short",
                                        spartina_zone == "M" ~ "Medium",
                                        spartina_zone == "T" ~ "Tall"),
         spartina_zone = factor(spartina_zone_name, levels = c("Short", "Medium", "Tall"))) %>%
  select(month, year, date, littoraria_count, spartina_zone) %>%
  group_by(spartina_zone) %>%
  summarise(littoraria_count = sum(littoraria_count, na.rm = TRUE)) %>%
  ggplot(., aes(x = spartina_zone, y = littoraria_count)) +
  geom_col(fill = "#455D44", color = "black") +
  theme_bw() +
  labs(x = "Marsh Grass Height Zone",
       y = "Marsh Periwinkle Snail Count") +
  theme_minimal(base_family = "fira condensed") +
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45, hjust = 1),
        axis.title.y = element_text(margin = margin(r = 15)),
        axis.title.x = element_text(margin = margin(t = 15)),
        panel.grid.major.x = element_line(color = "grey50", linewidth = 0.25, linetype = "dotted"),
        panel.grid.major.y = element_line(color = "grey50", linetype = "dotted")
        )
```

```{r}
# # prepare snail data for heatmap
# snail_heatmap <- stem_animals %>%
#   filter(year != 2013) %>%
#   mutate(month_name = as.factor(month.name[month]),
#          month_name = factor(month_name, levels = month.name)) %>%
#   select(month, month_name, year, date, littoraria_count, spartina_zone) %>%
#   group_by(month_name, year) %>%
#   summarise(littoraria_count = sum(littoraria_count, na.rm = TRUE))
# 
# additional_data <- data.frame(
#   month_name = factor(c("June", "September", "October", "October", "November", "November"),
#                       levels = month.name),
#   year = factor(c(2019, 2017, 2018, 2019, 2016, 2021))
# )
# 
# full_snail_heatmap <- full_join(snail_heatmap, additional_data)

# prepare grasshopper data for heatmap
invert_binary <- stem_animals %>%
  filter(year != 2013) %>%
  mutate(month_name = as.factor(month.name[month]),
         month_name = factor(month_name, levels = month.name),
         grasshopper_abundance_index = as.character(grasshopper_abundance_index),
         prokelisia_abundance_index = as.character(prokelisia_abundance_index),
         grasshopper_abundance_index = as.numeric(grasshopper_abundance_index),
         prokelisia_abundance_index = as.numeric(prokelisia_abundance_index),
         day = day(date)) %>%
  select(month, month_name, year, date, grasshopper_abundance_index, prokelisia_abundance_index) %>%
  group_by(month_name, year) %>%
  summarise(grasshopper = max(grasshopper_abundance_index),
            planthopper = max(prokelisia_abundance_index),
            grasshopper = as.factor(grasshopper),
            planthopper = as.factor(planthopper))

additional_data2 <- data.frame(
  month_name = factor(c("February", "June", "September", "October", "October", "November", "November"),
                      levels = month.name), year = factor(c(2020, 2019, 2017, 2018, 2019, 2016, 2021))
)

full_heatmap_data <- full_join(invert_binary, additional_data2) %>%
  pivot_longer(cols = grasshopper:planthopper, names_to = "Animal",
               values_to = "Abundance")
```

```{r}
# ggplot(full_snail_heatmap) +
#   geom_tile(aes(x = month_name, y = year, fill = littoraria_count), color = "slategrey") +
#   scale_fill_gradient(low = "white", high = "purple4") +
#   ggnewscale::new_scale_color() +
#   geom_tile(data = subset(full_snail_heatmap, is.na(littoraria_count)),
#             aes(x = month_name, y = year, color = "slategrey"), fill = "grey", linewidth = 0) +
#   labs(title = "Marsh Periwinkle Snail Counts", 
#        subtitle = "at the Georgia Coastal Ecosystem LTER Flux Tower (2014-2022)",
#        x = "",
#        y = "Year",
#        fill = "Snail Counts",
#        color = "No Data") +
#   theme_minimal(base_family = "fira condensed") +
#   theme(axis.line = element_blank(),
#         panel.grid = element_blank(),
#         panel.border = element_blank(),
#         axis.text.x = element_text(angle = 45, hjust = 1, size = 13),
#         axis.text.y = element_text(size = 13),
#         axis.title.y = element_text(margin = margin(r = 16), size = 17),
#         plot.title = element_text(size = 26, hjust = 0.5),  # Center the title
#         plot.subtitle = element_text(hjust = 0.5)) +
#   guides(color = guide_legend(override.aes = list(fill = "grey"), label = FALSE))
```

```{r}
# grasshopper_plot <- ggplot(grasshopper_heatmap) +
#   geom_tile(aes(x = month_name, y = year, fill = max_grasshopper), color = "black") +
#   scale_fill_manual(values = c("#DFE3CE","#BDCFA1","#455D44", "#23341E"), labels = c("Rare", "Common", "Abundant", "Very Abundant")) +
#   labs(title = "Invertebrate Animal Abundance at the\n Georgia Coastal Ecosystem LTER Flux Tower (2014-2022)", 
#        subtitle = "Grasshopper",
#        x = "",
#        y = "Year",
#        fill = "Abundance") +
#   theme_minimal(base_family = "fira condensed") +
#   theme(axis.line = element_blank(),
#         panel.grid = element_blank(),
#         panel.border = element_blank(),
#         axis.text.x = element_text(angle = 45, hjust = 1, size = 13),
#         axis.text.y = element_text(size = 13),
#         axis.title.y = element_text(margin = margin(r = 16), size = 17),
#         plot.title = element_text(size = 20, hjust = 0.5),  # Center the title
#         plot.subtitle = element_text(hjust = 0.5, size = 17)) +
#   guides(color = guide_legend(override.aes = list(fill = "grey"), label = FALSE))
```

```{r}
# planthopper_plot <- ggplot(planthopper_heatmap) +
#   geom_tile(aes(x = month_name, y = year, fill = max_planthopper), color = "black") +
#   scale_fill_manual(values = c(0 = "white", 1 = "#DFE3CE", 2 = "#BDCFA1", 3 = "#455D44", 4 = "#23341E"), 
#                     labels = c("Absent","Rare", "Common", "Abundant", "Very Abundant")) +
#   labs(subtitle = "Planthopper", 
#        x = "",
#        y = "Year",
#        fill = "Abundance") +
#   theme_minimal(base_family = "fira condensed") +
#   theme(axis.line = element_blank(),
#         panel.grid = element_blank(),
#         panel.border = element_blank(),
#         axis.text.x = element_text(angle = 45, hjust = 1, size = 13),
#         axis.text.y = element_text(size = 13),
#         axis.title.y = element_text(margin = margin(r = 16), size = 17),
#         plot.title = element_text(size = 17, hjust = 0.5),  # Center the title
#         plot.subtitle = element_text(hjust = 0.5, size = 17)) +
#   guides(color = guide_legend(override.aes = list(fill = "grey"), label = FALSE))
```

```{r}
ggplot(full_heatmap_data) +
  geom_tile(aes(x = month_name, y = year, fill = Abundance), color = "black") +
  scale_fill_manual(values = c("white","#DFE3CE","#BDCFA1","#455D44", "#23341E"), 
                    labels = c("Absent","Rare", "Common", "Abundant", "Very Abundant"),
                    na.value = "grey") +
  facet_wrap(~Animal) +
  labs(title = "Invertebrate Animal Abundance at the\n Georgia Coastal Ecosystem LTER Flux Tower (2014-2022)", 
       x = "",
       y = "Year",
       fill = "Abundance") +
  theme_minimal(base_family = "fira condensed") +
  theme(axis.line = element_blank(),
        panel.grid = element_blank(),
        panel.border = element_blank(),
        axis.text.x = element_text(angle = 45, hjust = 1, size = 13),
        axis.text.y = element_text(size = 13),
        axis.title.y = element_text(margin = margin(r = 16), size = 17),
        plot.title = element_text(size = 20, hjust = 0.5),  # Center the title
        plot.subtitle = element_text(hjust = 0.5, size = 17),
        strip.text = element_text(size = 13)) 
```

7. Answer the following questions:
- What challenges did you encounter or anticipate encountering as you continue to build / iterate on your visualizations in R?
- What ggplot extension tools / packages do you need to use to build your visualizations? Are there any that we haven’t covered in class that you’ll be learning how to use for your visualizations?
- What feedback do you need from the instructional team and / or your peers to ensure that your intended message is clear?